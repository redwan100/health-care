// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ! MODELS

// * usesr model
model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?
  doctor             Doctor?
  patient            Patient?

  @@map("users")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

// *ADMIN MODEL 
model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique //! fkey
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

// * DOCTOR MODEL 
model Doctor {
  id                  String   @id @default(uuid())
  name                String
  email               String   @unique //! fkey
  profilePhoto        String?
  contactNumber       String
  address             String?
  registrationNumber  String
  experience          Int      @default(0)
  gender              Gender
  appointmentFee      Int
  qualification       String
  currentWorkingPlace String
  designation         String
  isDeleted           Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user              User                @relation(fields: [email], references: [email])
  doctorSpecialties DoctorSpecialties[]
  doctorSchedules   DoctorSchedules[]
  appointment       Appointment[]
  prescription      Prescription[]
  review            Review[]

  @@map("doctors")
}

enum Gender {
  MALE
  FEMALE
}

model Patient {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique //! fkey
  profilePhoto      String?
  contactNumber     String
  address           String?
  isDeleted         Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [email], references: [email])
  patientHealthData PatientHealthData?
  medicalReport     MedicalReport[]
  appointment       Appointment[]
  prescription      Prescription[]
  review            Review[]

  @@map("patients")
}

model Specialties {
  id                 String              @id @default(uuid())
  title              String
  icon               String
  doctorSepecialties DoctorSpecialties[]

  @@map("specialties")
}

model DoctorSpecialties {
  specialtiesId String
  specialties   Specialties @relation(fields: [specialtiesId], references: [id])
  doctorId      String
  doctor        Doctor      @relation(fields: [doctorId], references: [id])

  @@id([specialtiesId, doctorId])
  @@map("doctor_specialties")
}

model PatientHealthData {
  id                  String        @id @default(uuid())
  patientId           String        @unique
  patient             Patient       @relation(fields: [patientId], references: [id])
  gender              Gender
  dateOfBirth         String
  bloodGroup          BloodGroup
  hasAllergies        Boolean?      @default(false)
  hasDiabetes         Boolean?      @default(false)
  height              String
  weight              String
  smokingStatus       Boolean?      @default(false)
  dietaryPreferences  String?
  pregnancyStatus     Boolean?      @default(false)
  mentalHealthHistory String?
  immunizationStatus  String?
  hasPastSurgeries    Boolean?      @default(false)
  recentAnxiety       Boolean?      @default(false)
  recentDepression    Boolean?      @default(false)
  maritalStatus       MaritalStatus @default(UNMARRIED)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@map("patient_health_data")
}

enum BloodGroup {
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  O_NEGATIVE
  AB_NEGATIVE
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
}

model MedicalReport {
  id         String   @id @default(uuid())
  patientId  String
  patient    Patient  @relation(fields: [patientId], references: [id])
  reportName String
  reportLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("medical_report")
}

model Schedule {
  id              String            @id @default(uuid())
  startDateTime   DateTime
  endDateTime     DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  doctorSchedules DoctorSchedules[]
  appointment     Appointment?

  @@map("schedules")
}

model DoctorSchedules {
  doctorId      String
  doctor        Doctor       @relation(fields: [doctorId], references: [id])
  scheduleId    String
  schedule      Schedule     @relation(fields: [scheduleId], references: [id])
  isBooked      Boolean      @default(false)
  appointmentId String?      @unique
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])

  @@id([doctorId, scheduleId])
  @@map("doctor_shedules")
}

model Appointment {
  id        String  @id @default(uuid())
  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  scheduleId     String            @unique
  schedule       Schedule          @relation(fields: [scheduleId], references: [id])
  videoCallingId String
  status         AppointmentStatus @default(SCHEDULED)
  paymentStatus  paymentStatus     @default(UNPAID)

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  doctorSchedules DoctorSchedules?
  payment         Payment?
  prescription    Prescription?
  review          Review?

  @@map("appointments")
}

enum AppointmentStatus {
  SCHEDULED
  INPROGRESS
  COMPLETED
  CANCELED
}

enum paymentStatus {
  PAID
  UNPAID
}

model Payment {
  id                 String        @id @default(uuid())
  appointmentId      String        @unique
  appointment        Appointment   @relation(fields: [appointmentId], references: [id])
  amount             Float
  transactionId      String
  status             paymentStatus @default(UNPAID)
  paymentGatewayData Json?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@map("payments")
}

model Prescription {
  id            String      @id @default(uuid())
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])

  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  instructions String
  followUpDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("prescriptions")
}

model Review {
  id String @id @default(uuid())

  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])

  rating  Float
  comment String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}
